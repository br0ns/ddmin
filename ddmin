#!/usr/bin/env python2

import sys
import os
import tempfile
import argparse
import subprocess

p = argparse.ArgumentParser(
    description = \
    'Generate 1-minimal test cases using the _delta debugging_ '
    'algorithm.',
)

p.add_argument(
    'command',
    metavar = '<command>',
    help = \
    'Command to run test case; "@input" is replaced by the path of the '
    'current test case',
)

p.add_argument(
    '--input', '-i',
    metavar = '<path>',
    help = 'Failing test case',
    required = True,
)

p.add_argument(
    '--output', '-o',
    metavar = '<path>',
    help = 'Where to write the minimal test case (default: stdout)',
)

# XXX: Argument not used yet
p.add_argument(
    '--verbose', '-v',
    action = 'count',
    help = 'Enable more output',
)

p.add_argument(
    '--status',
    metavar = '<number>',
    help = 'Status code indicating failure (default: != 0)',
)

p.add_argument(
    '--writes',
    metavar = '<string>',
    help = 'Output indicating failure (default: none)',
)

args = p.parse_args()
if args.status:
    try:
        args.status = int(args.status)
    except:
        print >>sys.stderr, 'Status code must be an integer'
        sys.exit(1)

fd = file(args.input, 'rb')
fd.seek(0, os.SEEK_END)
fsize = fd.tell()

cache = dict()

def write_chunk((start, end), outfd):
    numb = end - start
    fd.seek(start, os.SEEK_SET)
    while numb:
        n = min(0x1000, numb)
        numb -= n
        outfd.write(fd.read(n))

def write_chunks(chunks, fd):
    for chunk in chunks:
        write_chunk(chunk, fd)

def write_test(test):
    outfd, outpath = tempfile.mkstemp(prefix = 'ddmin-')
    outfd = os.fdopen(outfd, 'wb')
    write_chunks(test, outfd)
    outfd.close()
    return outpath

def save_test(test):
    if args.output:
        with open(args.output, 'wb') as fd:
            write_chunks(test, fd)
    else:
        write_chunks(test, sys.stdout)

def run_cmd(cmd):
    p = subprocess.Popen(cmd, shell = True,
                         stdin  = file('/dev/zero'),
                         stdout = subprocess.PIPE,
                         stderr = subprocess.PIPE)
    o, _e = p.communicate()
    return p.returncode, o

def test_fails(test):
    if test in cache:
        return cache[test]
    path = write_test(test)
    cmd = args.command.replace('@input', path)

    status, output = run_cmd(cmd)

    if args.writes != None:
        res = args.writes in output
    else:
        if args.status != None:
            res = args.status == status
        else:
            res = args.status != 0

    os.unlink(path)

    cache[test] = res
    return res

def make_chunks(n):
    return tuple(((i * fsize) // n, ((i + 1) * fsize) // n) for i in xrange(n))

def size(test):
    return sum(e - s for s, e in test)

def show_test(test):
    for s, e in test:
        print '<%d-%d>' % (s, e),
    print

def normalize(test):
    out = []
    start1, end1 = test[0]
    for start2, end2 in test[1:]:
        if start2 == end1:
            end1 = end2
        else:
            out.append((start1, end1))
            start1, end1 = start2, end2
    out.append((start1, end1))
    return tuple(out)

def increase_granularity(test):
    test_ = []
    for start, end in test:
        delta = (end - start) // 2
        start1 = start
        end1 = start + delta
        start2 = end1
        end2 = end
        # first chunk may be empty
        if start1 != end1:
            test_.append((start1, end1))
        test_.append((start2, end2))
    return tuple(test_)

def ddmin():
    test = ((0, fsize), )
    return ddmin2(test, 1)

def ddmin2(test, n):
    show_test(test)

    for i, chunk in enumerate(test):
        test_ = (chunk,)
        if test_fails(test_):
            # reduce to subset
            print 'Reduce to subset'
            return ddmin2(increase_granularity(test_), n * 2)

    for i, chunk in enumerate(test):
        test_ = test[:i] + test[i + 1:]
        if test_fails(test_):
            # reduce to complement
            print 'Reduce to complement'
            return ddmin2(test_, n)

    # increase granularity
    if n >= fsize:
        test = normalize(test)
        print 'Minimal test case:'
        show_test(test)
        return test

    print 'Increase granularity'
    return ddmin2(increase_granularity(test), n * 2)

save_test(ddmin())
